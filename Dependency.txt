<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.9.2</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.9.2</version>
		</dependency>


In client 2 the above has been added. This should be added in all ms.

Three level of documentattion : 1. Class level 2. Varibale level 3.Method level

/**/ - Normal Remark
/** - Class level

for testing :
JUnit Jupiter API » 5.8.2 ----------------
JUnit Jupiter Engine » 5.8.2 ---------------

Add annotation for testing : 
@RunWith(SpringRunner.class)
@ExtendWith(SpringExtension.class)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)

<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.4</version>
				<executions>
					<execution>
						<id>prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>target/jacoco.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>target/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<configuration>
							<systemPropertyVariables>
								<jacoco-agent.destfile>target/jacoco.exec</jacoco-agent.destfile>
							</systemPropertyVariables>
						</configuration>
					</execution>
				</executions>
			</plugin>

<!-- https://mvnrepository.com/artifact/org.jacoco/org.jacoco.agent -->
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.agent</artifactId>
			<version>0.8.10</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.jacoco/jacoco-maven-plugin -->
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>jacoco-maven-plugin</artifactId>
			<version>0.8.10</version>
		</dependency>


both pugin and dependency added in client 2.

Apache Log4j » 1.2.17 -----------------------
create log4j.properties file under resources
create log folder in the microservice(client2)
create a file projectlogin.log

Kafka -----------

bin/zookeeper-server-start.sh config/zookeeper.properties
bin/kafka-server-start.sh config/server.properties
dependencies : for producer and consumer
Spring for Apache Kafka
Web
Devtools
Lombok

Serialization? Means data or object inside RAM memory will be converted into series if bytes which can be communicated on network.

Deserialization means taking a  group of bytes from the network or file and converting back to object in memory so that program can use it.

spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=myGroup
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

server.port = 1006 ----producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer


server.port = 1007 ----consumer

group id - should be common in both producer and consumer

Then create a configuration :
import org.slf4j.Logger;