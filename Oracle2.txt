When a primary key exists, then only the foreign key can exist.

When there is both primary key and foreign key, we cannot delete primary key first. We need to delete the foreign key first.

Suppose if i delete a primary key, the foreign key should automatically deleted. This is called as cascading effect.

We can add this cascading effect to the primary key. When primary key deletes the foreign key get deleted.

create table temp(
id varchar2(6) constraint k2 primary key,
fname varchar2(35) not null
);

insert into temp values ('S001', 'ram');
insert into temp values ('S002', 'mohan');
insert into temp values ('S003', 'raghul');

using on delete cascade in connecting table:

create table temp1(
id varchar2(6) constraint k3 references temp(id) on delete cascade,
city varchar2(30)
);

insert into temp1 values ('S001', 'Chennai');
insert into temp1 values ('S002', 'Coimbatore');


to drop a constraint for adding on delete cascade:

alter table temp1 drop constraint k3;


to add constraint and on delete cascade to delete the primary key directly:

alter table temp1 add constraint k3 foreign key (id) references temp(id) on delete cascade;


SUB-QUERY:
----------

Sub-query means a query inside a query. A Sub query can be of types:
			
			1. Inline view
			2. Normal Sub-query
			3. Corelated Sub-query


Inline view : A subquery designed from clause instead of using a table name.
-----------

write a query to display studentid, name and no.of test he has taken. If test not taken show absent.

select sid, count(tnumber) tn from marks group by sid;

select a.sid, a.fname, nvl(to_char(b.tn),'Absent') attendance from sdetails a 
left outer join (select sid, count(tnumber) tn from marks group by sid) b
on (a.sid=b.sid) where b.tn is null order by sid ;


Normal Sub-query: Here a subquery is written in the where clause. this sub-query can be of types:	
-----------------

			1.Single row sub-query
			2.Multi row sub-query
			3.Single column sub-query
			4.Multi column sub-query

	If the inner query returns only one row called as a Single row sub-query.Here to compare we can use equals, greater than and less than symbols.
 
	If the inner query returns more than one row called as a Multi row sub-query. Here we cannot use the above opeartors. We can only use in operator, greater than all, less than all, greater than any, less than any.


	If the outer query compares only one column of the inner query is called Single column sub-query. 

	If the outer query compares more than one column of the inner query is called Multi column sub-query. 

Write a query to display all the student names who belongs to chennai :

select sid, fname from sdetails where sid in (select sid from con1 where cityid in (select cityid from city where cityname = 'Chennai'));

Write a query to display all the student name belongs to Tamilnadu:

select sid, fname from sdetails where sid in (select sid from con1 where cityid in (select cityid from city where stateid in (select stateid from state where statename ='Tamilnadu')));

Write a query to display the following : 
who is first class in test1, 
who is not taken any of the two test,
who has failed in the first test display only name and id.


select sid, fname from sdetails where sid in (select sid from marks where tnumber ='1' and ((sub1+sub2+sub3)/3) >60);

select sid, fname, 'firstclass' class from sdetails where sid in (select sid from marks where tnumber ='1' and ((sub1+sub2+sub3)/3) >60);

select sid, fname from sdetails where sid not in (select sid from marks where tnumber in ('1','2'));

select sid, fname,'fail   ' class from sdetails where sid in (select sid from marks where tnumber ='1' and ((sub1+sub2+sub3)/3) <35);


Corelated Sub-query: Inner query will compare with the outer query value is called corelated sub-query. It is like a 
-------------------
nested loop for every one value of outer query inner query will be re-repeated.

Example :
--------	
	If there is a 100 rows in outer query the inner query will repeat 100 times. If it is a normal sub-query it will repeats only once. 

Hence corelated query will consume huge amount of time and it is not used in the recent days.

Example :
---------

Write a query to display who has passed in the first test and second test.

select a.sid, a.fname from sdetails a where a.sid in (select b.sid from marks b where b.tnumber in ('1','2')
and ((sub1+sub2+sub3)/3)>35 and (a.sid=b.sid) );


The different data objects are :
			
				1. table

				2. view
				
				3. index

				4. store procedures (PL/SQL)


Table : seen already

View : view is nothing but a logical table.  

note: when a query is given to the backend like insert, update , delete. this will be in a high level language. 

The query will be parsed to the query will be checked for permission, it is going to check for syntax which derives the meaning of the query. Finally it converts the query to a low level language (machine level) then the execution will happen.

	(i) There will be huge delay if number of people connects is called scaling. hence the query should be compiled and kept at the backend. then the execution will becomes faster and there will be no delay.


	(ii) This is the reason we can create a view which is a logical table, the query will be compiled and kept. View are also created to restrict the access. 

Note: Because of the SQL injection, we should not share it to anyone including the team members of the project with the actual table names. This may lead to SQL injection and damages the project. We should create a view and give the view name.

View can be of two types :
			
			i) simple view : on this view we can perform insert, update and delete. Simple view contains only few columns of the table without additional columns like computations, expressions , joins , subquery and so on.

Example :
 
create view student as select * from sdetails;

create view student1 as select sid, fname from sdetails;

create view student2 as select * from sdetails where sid between 'S001' and 'S009';

create view student3 as select * from sdetails where sid between 'S001' and 'S009' with check option;
		
			ii) Complex view : In this view we cannot perform the above operations. It can contains additional columns like computations, expressions , joins , subquery and so on.

Example :

create view student4 as select sid, fname,'fail   ' class from sdetails where sid in (select sid from marks where tnumber ='1' and ((sub1+sub2+sub3)/3) <35);


3. Index : Index is a file created to track the records in a binary way. So the speed of searach will be increased.
By default it automatically creates index of primary key. So searching on primary key will be faster. Suppose if i want to search on fname this will take longer time. Suppose if we are searching data on a particular column, we should create an index on the column. Search on the column will become faster.

note: Unnecessarily, we should not create multiple index which will reduce the speed.

select * from student where fname ='Rahul';

create index n1 on sdetails(fname);

PL/SQL : Procedure Language SQL
-------

It is a set of instruction which works on data and give the necessary output.

For example : we want to calculate a complex structure of income tax or GST, water bill , electricity bill. Here simple query will not work and we should use PLSQL.

When we want perform like insert, update and delete we should perform this through the PLSQL. the reason is it can be compiled and kept which increases the speed. Most of the dimension(calculations) should be done at the database level.


PLSQL is a block structured language which has anonymous block and named block. Anonymous block we should create each time where the named block will be compiled and kept with the database which is called store procedures.

Anonymous block : It is a block structure as follows :-

	Declare 
	
	Begin
	
	Exception

	End

Here declare and exception is optional, if it is necessary we can use but begin and end is compulsory.We use declare part to declare the variables, in begin part we will have the main instructions. If there is a ambiguity(unclear) also cannot be executed then the control will go to the exception part. 

The good practice of writing PLSQL is-
		
		i) 	to create necessary store procedures.
		ii) 	the store procedures should not have I/O statements.
		iii) 	it should have arguments (input) and return type (output)
		iv) 	in PLSQL we use "=" for comparison and ":=" for computations.
		v)	one instruction in one line and there is ";" should be used.
Example :

declare 
a1 number(5):=0;
a2 varchar(30):='raghul';
a3 number(5) default 10;
a4 number(5) not null :=10;
a5 number(5) not null default 20;
a6 a1%type :=10; - type of a1 i.e.., number(5) and this is the recommended way. it will not take not null.
a7 sdetails.fname%type :='Raghul';
a8 sdetails%rowtype;
begin
dbms_output.put_line(a1);
end;

declare 
a1 number(5):=0;
a2 varchar(30):='raghul';
a3 number(5) default 10;
a4 number(5) not null :=10;
a5 number(5) not null default 20;
a6 a1%type :=10; 
a7 sdetails.fname%type :='Raghul';
a8 sdetails%rowtype;
begin
a8.sid :='S001';
dbms_output.put_line(a8.sid);
end;
/

declare 
a1 number(5):=0;
a2 varchar(30):='raghul';
a3 number(5) default 10;
a4 number(5) not null :=10;
a5 number(5) not null default 20;
a6 a1%type :=10; 
a7 sdetails.fname%type :='Raghul';
a8 sdetails%rowtype;
begin
select * into a8 from student where sid='S002';
dbms_output.put_line(a8.sid ||' '|| a8.fname ||' '|| a8.lname ||' '|| a8.dob );
end;
/

Store any sid display his details and show whether he is passed in the test 1 or not.

declare 
a1 sdetails%rowtype;
a2 marks%rowtype;
a3 marks.sub1%type;

begin
select * into a1 from student where sid='S002';
select * into a2 from marks where tnumber='1' and sid='S002';
a3:=(a2.sub1+a2.sub2+a2.sub3)/3;

dbms_output.put_line(a1.sid ||' '|| a1.fname ||' '|| a1.lname ||' '|| a1.dob );

if (a3 <35) then 
dbms_output.put_line ('fail');
else
dbms_output.put_line('pass');
end if;
end;
/

Find biggest of 3 numbers (we can store 3numbers)

declare
a1 number(5) := 10;
a2 a1%type := 20;
a3 a1%type := 30;

begin
if (a1 > a2 and a1 >a3)
then 
dbms_output.put_line(a1 || 'is greatest of 3numbers');
else if (a2 > a3)
then 
dbms_output.put_line(a2 || 'is greatest of 3numbers');
else 
dbms_output.put_line(a3 || 'is greatest of 3numbers');
end if;
end if;
end;
/